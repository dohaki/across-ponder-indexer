import { createSchema } from "@ponder/core";

export default createSchema((p) => ({
  DepositStatus: p.createEnum(["PENDING", "FILLED"]),
  User: p.createTable({
    id: p.bytes(),
    address: p.bytes(),
    deposits: p.many("Deposit.depositorId"),
    fills: p.many("Fill.relayerId"),
  }),
  Token: p.createTable({
    id: p.string(),
    chainId: p.int(),
    address: p.bytes(),
    symbol: p.string(),
    decimals: p.int(),
    name: p.string(),
    deposits: p.many("Deposit.tokenId"),
  }),
  Price: p.createTable({
    id: p.string(),
    formattedISODate: p.string(),
    tokenId: p.string().references("Token.id"),
    token: p.one("tokenId"),
    usd: p.bigint(),
  }),
  Deposit: p.createTable({
    id: p.string(),
    depositId: p.int(),
    fromChain: p.int(),
    toChain: p.int(),
    txHash: p.bytes(),
    amount: p.bigint(),
    depositorId: p.bytes().references("User.id"),
    depositor: p.one("depositorId"),
    recipientId: p.bytes().references("User.id"),
    recipient: p.one("recipientId"),
    tokenId: p.string().references("Token.id"),
    token: p.one("tokenId"),
    tokenPriceId: p.string().references("Price.id"),
    tokenPrice: p.one("tokenPriceId"),
    depositDate: p.int(),
    fills: p.many("Fill.depositId"),
    totalFillId: p.string().optional().references("TotalFill.id"),
    totalFill: p.one("totalFillId"),
  }),
  TotalFill: p.createTable({
    id: p.string(),
    depositId: p.string().references("Deposit.id"),
    deposit: p.one("depositId"),
    fillAmount: p.bigint(),
    totalFilledAmount: p.bigint(),
    fillDate: p.int(),
    txHash: p.bytes(),
    realizedLpFeePct: p.bigint(),
    relayerFeePct: p.bigint(),
    relayerId: p.bytes().references("User.id"),
    relayer: p.one("relayerId"),
    tokenId: p.string().references("Token.id"),
    token: p.one("tokenId"),
    tokenPriceId: p.string().references("Price.id"),
    tokenPrice: p.one("tokenPriceId"),
  }),
  Fill: p.createTable({
    id: p.string(),
    depositId: p.string().references("Deposit.id"),
    deposit: p.one("depositId"),
    fillAmount: p.bigint(),
    totalFilledAmount: p.bigint(),
    fillDate: p.int(),
    txHash: p.bytes(),
    realizedLpFeePct: p.bigint(),
    relayerFeePct: p.bigint(),
    relayerId: p.bytes().references("User.id"),
    relayer: p.one("relayerId"),
    tokenId: p.string().references("Token.id"),
    token: p.one("tokenId"),
    tokenPriceId: p.string().references("Price.id"),
    tokenPrice: p.one("tokenPriceId"),
  }),
}));
